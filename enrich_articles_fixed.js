import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://azlrxwfbgyednniyxuhe.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF6bHJ4d2ZiZ3llZG5uaXl4dWhlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MTg5MDg3OCwiZXhwIjoyMDc3NDY2ODc4fQ.T0tj0GY68cbLAt_iGRbRxQs_vr4lTKsACag9avKdIQs';

const supabase = createClient(supabaseUrl, supabaseKey);

// –ü–æ–ª—É—á–∞–µ–º OpenAI API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

async function callOpenAI(prompt, retries = 3) {
  if (!OPENAI_API_KEY) {
    throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞—É—á–Ω—ã–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—ã–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω—ã–º–∏, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 1000
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      return data.choices[0].message.content;

    } catch (error) {
      console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      if (attempt === retries) {
        throw error;
      }
      // –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
}

function extractKeyFindingsFromAbstract(abstract, currentFindings, neededCount) {
  // –ï—Å–ª–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  if (!abstract || abstract.length < 50) {
    return [];
  }

  // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤ –∏–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
  // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –≤—ã–≤–æ–¥—ã
  const conclusionPatterns = [
    /–ø–æ–∫–∞–∑–∞–ª(–∏)?[–∞-—è\s]*\b(—á—Ç–æ|—è–≤–ª—è–µ—Ç—Å—è|–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç|–∏–º–µ–µ—Ç|–ø–æ–∑–≤–æ–ª—è–µ—Ç|–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç)\b/gi,
    /–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ[–∞-—è\s]*\b(–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç|–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç|—É–∫–∞–∑—ã–≤–∞–µ—Ç|–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç)\b/gi,
    /\b(–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ|–≤—ã—è–≤–ª–µ–Ω–æ|–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ|—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)\b[–∞-—è\s]*/gi,
    /\b(—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç|–¥–∞–Ω–Ω—ã–µ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É—é—Ç)\b[–∞-—è\s]*/gi
  ];

  const findings = [];
  const sentences = abstract.split(/[.!?]+/).filter(s => s.trim().length > 20);

  for (const pattern of conclusionPatterns) {
    for (const sentence of sentences) {
      const matches = sentence.match(pattern);
      if (matches && matches.length > 0) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        let finding = sentence.trim();
        finding = finding.replace(/\s+/g, ' '); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏ —É–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        if (finding.length > 150) {
          finding = finding.substring(0, 150).trim() + '...';
        }
        
        // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        finding = finding.replace(/^(–≠—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç|–î–∞–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç|The study shows)/i, '');
        finding = finding.replace(/^\s*,\s*/, '').trim();
        
        if (finding.length > 20) {
          findings.push(finding);
        }
        
        if (findings.length >= neededCount) {
          break;
        }
      }
    }
    if (findings.length >= neededCount) {
      break;
    }
  }

  return findings.slice(0, neededCount);
}

async function enrichArticleKeyFindings(article) {
  const title = article.title_ru || article.title;
  const abstract = article.abstract_ru || article.abstract;
  const currentFindings = article.key_findings_ru || article.key_findings || [];
  
  const neededCount = 3 - currentFindings.length;
  
  if (neededCount <= 0) {
    return null; // –£–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–≤–æ–¥–æ–≤
  }

  console.log(`   –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥–æ–≤: ${neededCount}`);

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º AI
  try {
    const prompt = `
–ù–ê–£–ß–ù–ê–Ø –°–¢–ê–¢–¨–Ø:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}
–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: ${abstract}

–¢–ï–ö–£–©–ò–ï –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´ (${currentFindings.length}):
${currentFindings.map((finding, i) => `${i + 1}. ${finding}`).join('\n')}

–ó–ê–î–ê–ß–ê: –î–æ–±–∞–≤—å ${neededCount} –Ω–æ–≤—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö –≤—ã–≤–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏. 

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ö–∞–∂–¥—ã–π –≤—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º
- –ù–ï –¥—É–±–ª–∏—Ä—É–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤—ã–≤–æ–¥—ã
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –≤—ã–≤–æ–¥"
- –î–ª–∏–Ω–∞ –∫–∞–∂–¥–æ–≥–æ –≤—ã–≤–æ–¥–∞: 20-100 —Å–ª–æ–≤
- –í—ã–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
- –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –¢–û–õ–¨–ö–û –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞:
["–ù–æ–≤—ã–π –≤—ã–≤–æ–¥ 1", "–ù–æ–≤—ã–π –≤—ã–≤–æ–¥ 2"]
`;

    const response = await callOpenAI(prompt);
    console.log(`   ü§ñ OpenAI –æ—Ç–≤–µ—Ç:`, response.substring(0, 100) + '...');

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
    const cleanResponse = response.replace(/```json|```/g, '').trim();
    const newFindings = JSON.parse(cleanResponse);

    if (!Array.isArray(newFindings)) {
      throw new Error('–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
    const enrichedFindings = [...currentFindings, ...newFindings];
    
    return {
      key_findings_ru: enrichedFindings,
      key_findings: enrichedFindings
    };

  } catch (error) {
    console.log(`   ‚ö†Ô∏è  AI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:`, error.message);
    
    // Fallback: –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–≤–æ–¥—ã –∏–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    const extractedFindings = extractKeyFindingsFromAbstract(abstract, currentFindings, neededCount);
    
    if (extractedFindings.length > 0) {
      console.log(`   üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: ${extractedFindings.length} –≤—ã–≤–æ–¥–æ–≤`);
      return {
        key_findings_ru: [...currentFindings, ...extractedFindings],
        key_findings: [...currentFindings, ...extractedFindings]
      };
    } else {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–≤–ª–µ–∫–ª–∏, –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–≤–æ–¥—ã
      console.log(`   ‚ö†Ô∏è  Fallback –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å`);
      return {
        key_findings_ru: currentFindings,
        key_findings: currentFindings
      };
    }
  }
}

async function enrichAllArticles() {
  try {
    console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–û–ì–ê–©–ï–ù–ò–ï –°–¢–ê–¢–ï–ô (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)\n');

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
    const { data: papers, error } = await supabase
      .from('research_papers')
      .select('id, title, title_ru, abstract, abstract_ru, key_findings, key_findings_ru')
      .order('publication_date', { ascending: false });

    if (error) throw error;

    const articlesToEnrich = papers.filter(paper => {
      const keyFindings = paper.key_findings_ru || paper.key_findings || [];
      return keyFindings.length < 3;
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${articlesToEnrich.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∏–∑ ${papers.length} –æ–±—â–∏—Ö\n`);

    if (articlesToEnrich.length === 0) {
      console.log('‚úÖ –í—Å–µ —Å—Ç–∞—Ç—å–∏ —É–∂–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö –≤—ã–≤–æ–¥–æ–≤!');
      return;
    }

    let successCount = 0;
    let noChangesCount = 0;
    let failureCount = 0;

    for (let i = 0; i < articlesToEnrich.length; i++) {
      const article = articlesToEnrich[i];
      const currentFindings = article.key_findings_ru || article.key_findings || [];
      const title = article.title_ru || article.title;
      
      console.log(`\nüìù [${i + 1}/${articlesToEnrich.length}] –û–±–æ–≥–∞—â–∞–µ–º: "${title.substring(0, 60)}..."`);
      console.log(`   –¢–µ–∫—É—â–∏—Ö –≤—ã–≤–æ–¥–æ–≤: ${currentFindings.length}`);

      try {
        // –û–±–æ–≥–∞—â–∞–µ–º —Å—Ç–∞—Ç—å—é
        const enrichedData = await enrichArticleKeyFindings(article);

        if (!enrichedData) {
          console.log(`   ‚úÖ –£–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–≤–æ–¥–æ–≤`);
          noChangesCount++;
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const newFindingsCount = enrichedData.key_findings_ru.length;
        const oldFindingsCount = currentFindings.length;
        
        if (newFindingsCount === oldFindingsCount) {
          console.log(`   ‚ö†Ô∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—ã–≤–æ–¥–æ–≤`);
          noChangesCount++;
          continue;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { error: updateError } = await supabase
          .from('research_papers')
          .update({
            key_findings_ru: enrichedData.key_findings_ru,
            key_findings: enrichedData.key_findings
          })
          .eq('id', article.id);

        if (updateError) throw updateError;

        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω–æ: ${oldFindingsCount} ‚Üí ${newFindingsCount} –≤—ã–≤–æ–¥–æ–≤`);
        successCount++;

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1500));

      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞:`, error.message);
        failureCount++;
      }
    }

    console.log('\nüìà –ò–¢–û–ì–ò –û–ë–û–ì–ê–©–ï–ù–ò–Ø:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω–æ: ${successCount} —Å—Ç–∞—Ç–µ–π`);
    console.log(`‚ö†Ô∏è  –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${noChangesCount} —Å—Ç–∞—Ç–µ–π`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${failureCount} —Å—Ç–∞—Ç–µ–π`);
    console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successCount > 0 ? (successCount / articlesToEnrich.length * 100).toFixed(1) : 0}%`);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê...');
    const { data: updatedPapers } = await supabase
      .from('research_papers')
      .select('key_findings_ru, key_findings')
      .order('publication_date', { ascending: false });

    const finalStats = updatedPapers.reduce((acc, paper) => {
      const findings = paper.key_findings_ru || [];
      acc.total++;
      if (findings.length >= 3) acc.compliant++;
      else if (findings.length > 0) acc.partial++;
      else acc.empty++;
      return acc;
    }, { total: 0, compliant: 0, partial: 0, empty: 0 });

    console.log(`‚úÖ –°—Ç–∞—Ç–µ–π —Å ‚â•3 –≤—ã–≤–æ–¥–∞–º–∏: ${finalStats.compliant} (${(finalStats.compliant / finalStats.total * 100).toFixed(1)}%)`);
    console.log(`‚ö†Ô∏è  –°—Ç–∞—Ç–µ–π —Å 1-2 –≤—ã–≤–æ–¥–∞–º–∏: ${finalStats.partial} (${(finalStats.partial / finalStats.total * 100).toFixed(1)}%)`);
    console.log(`‚ùå –°—Ç–∞—Ç–µ–π –±–µ–∑ –≤—ã–≤–æ–¥–æ–≤: ${finalStats.empty} (${(finalStats.empty / finalStats.total * 100).toFixed(1)}%)`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
enrichAllArticles().catch(console.error);