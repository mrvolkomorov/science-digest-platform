import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://azlrxwfbgyednniyxuhe.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF6bHJ4d2ZiZ3llZG5uaXl4dWhlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MTg5MDg3OCwiZXhwIjoyMDc3NDY2ODc4fQ.T0tj0GY68cbLAt_iGRbRxQs_vr4lTKsACag9avKdIQs';

const supabase = createClient(supabaseUrl, supabaseKey);

async function analyzeAndEnrichArticles() {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏
    const { data: papers, error } = await supabase
      .from('research_papers')
      .select('id, title, title_ru, key_findings, key_findings_ru, publication_date')
      .order('publication_date', { ascending: false });

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π:', error);
      return;
    }

    console.log(`üìä –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ: ${papers.length}\n`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
    const needEnrichment = [];
    let totalFindings = 0;
    let articlesWithThreeOrMore = 0;

    papers.forEach(paper => {
      const keyFindings = paper.key_findings_ru || paper.key_findings || [];
      const findingsCount = keyFindings.length;
      totalFindings += findingsCount;

      if (findingsCount >= 3) {
        articlesWithThreeOrMore++;
      } else {
        needEnrichment.push({
          id: paper.id,
          title: paper.title_ru || paper.title,
          currentFindings: findingsCount,
          missingFindings: 3 - findingsCount,
          publication_date: paper.publication_date
        });
      }
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const averageFindings = totalFindings / papers.length;
    const percentageNeedingEnrichment = (needEnrichment.length / papers.length * 100).toFixed(1);

    console.log('üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`‚îú‚îÄ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–æ–≤: ${averageFindings.toFixed(1)}`);
    console.log(`‚îú‚îÄ –°—Ç–∞—Ç–µ–π —Å ‚â•3 –≤—ã–≤–æ–¥–∞–º–∏: ${articlesWithThreeOrMore} (${(articlesWithThreeOrMore/papers.length*100).toFixed(1)}%)`);
    console.log(`‚îî‚îÄ –°—Ç–∞—Ç–µ–π —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±–æ–≥–∞—â–µ–Ω–∏—è: ${needEnrichment.length} (${percentageNeedingEnrichment}%)\n`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º –≤—ã–≤–æ–¥–∞–º
    console.log('üéØ –°–¢–ê–¢–¨–ò –¢–†–ï–ë–£–Æ–©–ò–ï –û–ë–û–ì–ê–©–ï–ù–ò–Ø:');
    
    const groupedByMissing = needEnrichment.reduce((acc, article) => {
      const key = article.missingFindings;
      if (!acc[key]) acc[key] = [];
      acc[key].push(article);
      return acc;
    }, {});

    Object.keys(groupedByMissing).forEach(missingCount => {
      const articles = groupedByMissing[missingCount];
      console.log(`\nüìù –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ${missingCount} ${missingCount === '1' ? '–≤—ã–≤–æ–¥' : missingCount === '2' ? '–≤—ã–≤–æ–¥–∞' : '–≤—ã–≤–æ–¥–æ–≤'} (${articles.length} —Å—Ç–∞—Ç–µ–π):`);
      
      articles.slice(0, 5).forEach((article, index) => {
        const title = article.title.length > 80 ? 
          article.title.substring(0, 80) + '...' : 
          article.title;
        console.log(`  ${index + 1}. [${article.currentFindings} ‚Üí 3] ${title}`);
      });
      
      if (articles.length > 5) {
        console.log(`  ... –∏ –µ—â—ë ${articles.length - 5} —Å—Ç–∞—Ç–µ–π`);
      }
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    return {
      totalArticles: papers.length,
      articlesNeedingEnrichment: needEnrichment,
      statistics: {
        averageFindings,
        articlesWithThreeOrMore,
        percentageNeedingEnrichment
      }
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ OpenAI
async function enrichArticleWithAI(articleId, currentFindings, missingCount, openaiApiKey) {
  if (!openaiApiKey) {
    console.log('‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ');
    return null;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
    const { data: paper, error } = await supabase
      .from('research_papers')
      .select('*')
      .eq('id', articleId)
      .single();

    if (error) throw error;

    console.log(`ü§ñ –û–±–æ–≥–∞—â–∞–µ–º —Å—Ç–∞—Ç—å—é: ${paper.title_ru || paper.title}`);

    // –í—ã–∑—ã–≤–∞–µ–º Edge Function –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
    const { data, error: functionError } = await supabase.functions.invoke('enhance-papers', {
      body: { 
        papers: [paper],
        openai_api_key: openaiApiKey,
        task: 'enrich_key_findings',
        required_findings: 3
      }
    });

    if (functionError) throw functionError;

    if (data && data.enhanced && data.enhanced.length > 0) {
      const enhanced = data.enhanced[0];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ –±–∞–∑–µ
      const { error: updateError } = await supabase
        .from('research_papers')
        .update({
          key_findings_ru: enhanced.key_findings_ru || enhanced.key_findings,
          key_findings: enhanced.key_findings
        })
        .eq('id', articleId);

      if (updateError) throw updateError;

      console.log(`‚úÖ –°—Ç–∞—Ç—å—è –æ–±–æ–≥–∞—â–µ–Ω–∞: ${enhanced.key_findings_ru?.length || enhanced.key_findings?.length} –≤—ã–≤–æ–¥–æ–≤`);
      return enhanced;
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ ${articleId}:`, error);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –ò –û–ë–û–ì–ê–©–ï–ù–ò–Ø –°–¢–ê–¢–ï–ô\n');
  
  const analysis = await analyzeAndEnrichArticles();
  
  if (!analysis) return;

  console.log('\nüìã –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:');
  console.log(`1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${analysis.totalArticles} —Å—Ç–∞—Ç–µ–π`);
  console.log(`2. –ù–∞–π–¥–µ–Ω–æ ${analysis.articlesNeedingEnrichment.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è`);
  console.log(`3. –î–ª—è –∑–∞–ø—É—Å–∫–∞ AI –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è OpenAI API –∫–ª—é—á`);
  
  console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ OpenAI API –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export { analyzeAndEnrichArticles, enrichArticleWithAI, main };

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
main().catch(console.error);