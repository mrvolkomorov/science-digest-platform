import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://azlrxwfbgyednniyxuhe.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF6bHJ4d2ZiZ3llZG5uaXl4dWhlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MTg5MDg3OCwiZXhwIjoyMDc3NDY2ODc4fQ.T0tj0GY68cbLAt_iGRbRxQs_vr4lTKsACag9avKdIQs';

const supabase = createClient(supabaseUrl, supabaseKey);

// –ü–æ–ª—É—á–∞–µ–º OpenAI API –∫–ª—é—á
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

async function callOpenAI(prompt, retries = 3) {
  if (!OPENAI_API_KEY) {
    throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: '–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–∞—É—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–æ—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–∞—É—á–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∏ —Å—Ç–∏–ª—å. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.3,
          max_tokens: 2000
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      return data.choices[0].message.content.trim();

    } catch (error) {
      console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      if (attempt === retries) {
        throw error;
      }
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
}

function needsTranslation(text) {
  if (!text) return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ MyMemory API
  if (text.includes('MYMEMORY WARNING')) return true;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–º (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
  const englishPattern = /^[a-zA-Z0-9\s.,;:!?'"()\-\[\]{}\/\\]+$/;
  const hasEnglishWords = /\b(the|and|of|to|in|for|with|by|from|on|at|this|that|these|those|is|was|were|are|been|have|has|had|will|would|could|should|may|might|can|study|research|analysis|results|conclusion|findings|data|method|approach|patients|subjects|participants|significant|effect|increase|decrease|compared|control|group|treatment|intervention|baseline|outcome|clinical|trial|randomized|systematic|review|meta|analysis)\b/i;
  
  return englishPattern.test(text) && hasEnglishWords.test(text);
}

async function translateText(text, fieldName) {
  if (!needsTranslation(text)) {
    return text; // –£–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
  }

  const prompt = `–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –Ω–∞—É—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:

${text}`;

  try {
    const translation = await callOpenAI(prompt);
    console.log(`  ‚úÖ ${fieldName}: –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ`);
    return translation;
  } catch (error) {
    console.log(`  ‚ùå ${fieldName}: –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ - ${error.message}`);
    return text; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
}

async function fixTranslations() {
  try {
    console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–ï–í–û–î–û–í\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏
    const { data: papers, error } = await supabase
      .from('research_papers')
      .select('id, title, title_ru, abstract, abstract_ru, key_findings, key_findings_ru')
      .order('publication_date', { ascending: false });

    if (error) throw error;

    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç—å–∏ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const articlesToFix = papers.filter(paper => {
      return needsTranslation(paper.title_ru) || 
             needsTranslation(paper.abstract_ru) ||
             (paper.key_findings_ru && paper.key_findings_ru.some(finding => needsTranslation(finding)));
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${articlesToFix.length} —Å—Ç–∞—Ç–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ ${papers.length} –æ–±—â–∏—Ö\n`);

    if (articlesToFix.length === 0) {
      console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –ø–æ—Ä—è–¥–∫–µ!');
      return;
    }

    let successCount = 0;
    let failureCount = 0;

    for (let i = 0; i < articlesToFix.length; i++) {
      const article = articlesToFix[i];
      const originalTitle = article.title_ru || article.title;
      
      console.log(`\nüìù [${i + 1}/${articlesToFix.length}] –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: "${originalTitle.substring(0, 60)}..."`);

      try {
        const updates = {};

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if (needsTranslation(article.title_ru)) {
          updates.title_ru = await translateText(article.title, '–∑–∞–≥–æ–ª–æ–≤–æ–∫');
        }

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
        if (needsTranslation(article.abstract_ru)) {
          updates.abstract_ru = await translateText(article.abstract, '–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è');
        }

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        if (article.key_findings_ru && article.key_findings_ru.some(finding => needsTranslation(finding))) {
          const translatedFindings = [];
          for (let j = 0; j < article.key_findings_ru.length; j++) {
            const finding = article.key_findings_ru[j];
            if (needsTranslation(finding)) {
              const translated = await translateText(finding, `–≤—ã–≤–æ–¥ ${j + 1}`);
              translatedFindings.push(translated);
            } else {
              translatedFindings.push(finding);
            }
          }
          updates.key_findings_ru = translatedFindings;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (Object.keys(updates).length > 0) {
          const { error: updateError } = await supabase
            .from('research_papers')
            .update(updates)
            .eq('id', article.id);

          if (updateError) throw updateError;

          console.log(`  ‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (${Object.keys(updates).length} –ø–æ–ª–µ–π)`);
          successCount++;
        } else {
          console.log(`  ‚ÑπÔ∏è  –°—Ç–∞—Ç—å—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π`);
          successCount++;
        }

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1500));

      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞:`, error.message);
        failureCount++;
      }
    }

    console.log('\nüìà –ò–¢–û–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ï–†–ï–í–û–î–û–í:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount} —Å—Ç–∞—Ç–µ–π`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${failureCount} —Å—Ç–∞—Ç–µ–π`);
    console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${(successCount / articlesToFix.length * 100).toFixed(1)}%`);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–í–û–î–û–í...');
    const { data: updatedPapers } = await supabase
      .from('research_papers')
      .select('title_ru, abstract_ru, key_findings_ru')
      .order('publication_date', { ascending: false });

    const stillBroken = updatedPapers.filter(paper => {
      return needsTranslation(paper.title_ru) || 
             needsTranslation(paper.abstract_ru) ||
             (paper.key_findings_ru && paper.key_findings_ru.some(finding => needsTranslation(finding)));
    });

    console.log(`‚úÖ –°—Ç–∞—Ç–µ–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏: ${updatedPapers.length - stillBroken.length} (${((updatedPapers.length - stillBroken.length) / updatedPapers.length * 100).toFixed(1)}%)`);
    console.log(`‚ö†Ô∏è  –°—Ç–∞—Ç–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${stillBroken.length} (${(stillBroken.length / updatedPapers.length * 100).toFixed(1)}%)`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
fixTranslations().catch(console.error);