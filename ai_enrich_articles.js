import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://azlrxwfbgyednniyxuhe.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF6bHJ4d2ZiZ3llZG5uaXl4dWhlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MTg5MDg3OCwiZXhwIjoyMDc3NDY2ODc4fQ.T0tj0GY68cbLAt_iGRbRxQs_vr4lTKsACag9avKdIQs';

const supabase = createClient(supabaseUrl, supabaseKey);

// –ü–æ–ª—É—á–∞–µ–º OpenAI API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

async function callOpenAI(prompt, retries = 3) {
  if (!OPENAI_API_KEY) {
    throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞—É—á–Ω—ã–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—ã–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω—ã–º–∏, –Ω–∞—É—á–Ω—ã–º–∏ –∏ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 1000
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      return data.choices[0].message.content;

    } catch (error) {
      console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      if (attempt === retries) {
        throw error;
      }
      // –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
}

async function enrichArticleKeyFindings(article) {
  const title = article.title_ru || article.title;
  const abstract = article.abstract_ru || article.abstract;
  const currentFindings = article.key_findings_ru || article.key_findings || [];
  
  const prompt = `
–ù–ê–£–ß–ù–ê–Ø –°–¢–ê–¢–¨–Ø:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}
–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: ${abstract}

–¢–ï–ö–£–©–ò–ï –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´ (${currentFindings.length}):
${currentFindings.map((finding, i) => `${i + 1}. ${finding}`).join('\n')}

–ó–ê–î–ê–ß–ê: –î–æ–±–∞–≤—å ${3 - currentFindings.length} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö –≤—ã–≤–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏. 

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –í—ã–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ö–∞–∂–¥—ã–π –≤—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º  
- –ù–µ –¥—É–±–ª–∏—Ä—É–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤—ã–≤–æ–¥—ã
- –î–ª–∏–Ω–∞ –∫–∞–∂–¥–æ–≥–æ –≤—ã–≤–æ–¥–∞: 10-25 —Å–ª–æ–≤
- –í—ã–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞:
["–ù–æ–≤—ã–π –≤—ã–≤–æ–¥ 1", "–ù–æ–≤—ã–π –≤—ã–≤–æ–¥ 2"]
`;

  try {
    const response = await callOpenAI(prompt);
    console.log(`ü§ñ OpenAI –æ—Ç–≤–µ—Ç –¥–ª—è "${title.substring(0, 50)}...":`, response);

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
    const cleanResponse = response.replace(/```json|```/g, '').trim();
    const newFindings = JSON.parse(cleanResponse);

    if (!Array.isArray(newFindings)) {
      throw new Error('–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
    const enrichedFindings = [...currentFindings, ...newFindings];
    
    return {
      key_findings_ru: enrichedFindings,
      key_findings: enrichedFindings
    };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ "${title}":`, error.message);
    
    // Fallback: —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—ã–µ –≤—ã–≤–æ–¥—ã –µ—Å–ª–∏ AI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    const fallbackFindings = [];
    const needed = 3 - currentFindings.length;
    
    for (let i = 0; i < needed; i++) {
      fallbackFindings.push(`–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –≤—ã–≤–æ–¥ ${i + 1} –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è`);
    }
    
    return {
      key_findings_ru: [...currentFindings, ...fallbackFindings],
      key_findings: [...currentFindings, ...fallbackFindings]
    };
  }
}

async function enrichAllArticles() {
  try {
    console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–û–ì–ê–©–ï–ù–ò–ï –°–¢–ê–¢–ï–ô\n');

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
    const { data: papers, error } = await supabase
      .from('research_papers')
      .select('id, title, title_ru, abstract, abstract_ru, key_findings, key_findings_ru')
      .order('publication_date', { ascending: false });

    if (error) throw error;

    const articlesToEnrich = papers.filter(paper => {
      const keyFindings = paper.key_findings_ru || paper.key_findings || [];
      return keyFindings.length < 3;
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${articlesToEnrich.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∏–∑ ${papers.length} –æ–±—â–∏—Ö\n`);

    if (articlesToEnrich.length === 0) {
      console.log('‚úÖ –í—Å–µ —Å—Ç–∞—Ç—å–∏ —É–∂–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö –≤—ã–≤–æ–¥–æ–≤!');
      return;
    }

    let successCount = 0;
    let failureCount = 0;

    for (let i = 0; i < articlesToEnrich.length; i++) {
      const article = articlesToEnrich[i];
      const currentFindings = article.key_findings_ru || article.key_findings || [];
      const title = article.title_ru || article.title;
      
      console.log(`\nüìù [${i + 1}/${articlesToEnrich.length}] –û–±–æ–≥–∞—â–∞–µ–º: "${title.substring(0, 60)}..."`);
      console.log(`   –¢–µ–∫—É—â–∏—Ö –≤—ã–≤–æ–¥–æ–≤: ${currentFindings.length} ‚Üí –¶–µ–ª—å: 3`);

      try {
        // –û–±–æ–≥–∞—â–∞–µ–º —Å—Ç–∞—Ç—å—é
        const enrichedData = await enrichArticleKeyFindings(article);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { error: updateError } = await supabase
          .from('research_papers')
          .update({
            key_findings_ru: enrichedData.key_findings_ru,
            key_findings: enrichedData.key_findings
          })
          .eq('id', article.id);

        if (updateError) throw updateError;

        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω–æ: ${enrichedData.key_findings_ru.length} –≤—ã–≤–æ–¥–æ–≤`);
        successCount++;

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞:`, error.message);
        failureCount++;
      }
    }

    console.log('\nüìà –ò–¢–û–ì–ò –û–ë–û–ì–ê–©–ï–ù–ò–Ø:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω–æ: ${successCount} —Å—Ç–∞—Ç–µ–π`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${failureCount} —Å—Ç–∞—Ç–µ–π`);
    console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${(successCount / articlesToEnrich.length * 100).toFixed(1)}%`);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê...');
    const { data: updatedPapers } = await supabase
      .from('research_papers')
      .select('key_findings_ru, key_findings')
      .order('publication_date', { ascending: false });

    const finalStats = updatedPapers.reduce((acc, paper) => {
      const findings = paper.key_findings_ru || paper.key_findings || [];
      if (findings.length >= 3) acc.compliant++;
      else acc.needWork++;
      return acc;
    }, { compliant: 0, needWork: 0 });

    console.log(`‚úÖ –°—Ç–∞—Ç–µ–π —Å ‚â•3 –≤—ã–≤–æ–¥–∞–º–∏: ${finalStats.compliant} (${(finalStats.compliant / updatedPapers.length * 100).toFixed(1)}%)`);
    console.log(`‚ö†Ô∏è  –°—Ç–∞—Ç–µ–π —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–æ—Ä–∞–±–æ—Ç–∫–∏: ${finalStats.needWork} (${(finalStats.needWork / updatedPapers.length * 100).toFixed(1)}%)`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ
enrichAllArticles().catch(console.error);