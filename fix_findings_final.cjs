#!/usr/bin/env node

const https = require('https');

const SUPABASE_URL = 'https://azlrxwfbgyednniyxuhe.supabase.co';
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF6bHJ4d2ZiZ3llZG5uaXl4dWhlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MTg5MDg3OCwiZXhwIjoyMDc3NDY2ODc4fQ.T0tj0GY68cbLAt_iGRbRxQs_vr4lTKsACag9avKdIQs';

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
const BAD_PATTERNS = [
  '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –≤—ã–≤–æ–¥',
  '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥',
  'MYMEMORY WARNING',
  '–≠—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç',
  '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç',
  '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã'
];

function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'azlrxwfbgyednniyxuhe.supabase.co',
      port: 443,
      path: path,
      method: method,
      headers: {
        'Authorization': `Bearer ${SUPABASE_KEY}`,
        'apikey': SUPABASE_KEY,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        console.log(`Status: ${res.statusCode}`);
        
        if (res.statusCode >= 200 && res.statusCode < 300) {
          try {
            const parsed = responseData ? JSON.parse(responseData) : null;
            resolve(parsed);
          } catch (e) {
            resolve(responseData);
          }
        } else {
          reject(new Error(`HTTP ${res.statusCode}: ${responseData}`));
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

function cleanFindings(findingsArray) {
  if (!Array.isArray(findingsArray)) return [];
  
  return findingsArray.filter(finding => {
    if (!finding || typeof finding !== 'string') return false;
    
    const findingLower = finding.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–ª–æ—Ö–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const hasBadPattern = BAD_PATTERNS.some(pattern => 
      findingLower.includes(pattern.toLowerCase())
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)
    const isLongEnough = finding.trim().length >= 20;
    
    return !hasBadPattern && isLongEnough;
  });
}

async function fixAllFindings() {
  try {
    console.log('üõ†Ô∏è  –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ï–í–´–• –í–´–í–û–î–û–í\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const papersResponse = await makeRequest('/rest/v1/research_papers?select=id,title,abstract_ru,abstract,key_findings_ru,key_findings&order=id.desc');
    const papers = papersResponse || [];

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${papers.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n`);

    let cleanedCount = 0;
    let totalRemoved = 0;

    for (const paper of papers) {
      const title = paper.title;
      const currentFindingsRu = paper.key_findings_ru || [];
      const currentFindingsEn = paper.key_findings || [];
      const abstract = paper.abstract_ru || paper.abstract;

      // –û—á–∏—â–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
      const cleanedFindingsRu = cleanFindings(currentFindingsRu);
      // –û—á–∏—â–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
      const cleanedFindingsEn = cleanFindings(currentFindingsEn);

      const removedRu = currentFindingsRu.length - cleanedFindingsRu.length;
      const removedEn = currentFindingsEn.length - cleanedFindingsEn.length;
      const totalRemovedForPaper = removedRu + removedEn;

      if (totalRemovedForPaper > 0) {
        console.log(`üîß –û—á–∏—â–∞–µ–º: "${title.substring(0, 50)}..."`);
        console.log(`   –£–¥–∞–ª–µ–Ω–æ –ø–ª–æ—Ö–∏—Ö –≤—ã–≤–æ–¥–æ–≤: ${totalRemovedForPaper}`);
        console.log(`   –û—Å—Ç–∞–ª–æ—Å—å (RU): ${cleanedFindingsRu.length}`);
        console.log(`   –û—Å—Ç–∞–ª–æ—Å—å (EN): ${cleanedFindingsEn.length}`);
        
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –≤—ã–≤–æ–¥–æ–≤ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ 3, –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∏–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        let finalFindingsRu = [...cleanedFindingsRu];
        let finalFindingsEn = [...cleanedFindingsEn];

        if (finalFindingsRu.length < 3 && abstract && abstract.length > 50) {
          console.log(`   üìù –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥—ã –∏–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏...`);
          
          // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã–≤–æ–¥–æ–≤ –∏–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
          const sentences = abstract.split(/[.!?]+/).filter(s => s.trim().length > 20);
          const relevantSentences = sentences.filter(sentence => {
            const lower = sentence.toLowerCase();
            return lower.includes('–ø–æ–∫–∞–∑–∞–ª') || lower.includes('–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç') || 
                   lower.includes('–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ') || lower.includes('–≤—ã—è–≤–ª–µ–Ω–æ') ||
                   lower.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã') || lower.includes('–¥–∞–Ω–Ω—ã–µ');
          });

          for (const sentence of relevantSentences) {
            if (finalFindingsRu.length >= 3) break;
            
            let finding = sentence.trim();
            if (finding.length > 200) {
              finding = finding.substring(0, 200).trim() + '...';
            }
            
            if (finding.length > 30) {
              finalFindingsRu.push(finding);
            }
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
          await makeRequest(`/rest/v1/research_papers?id=eq.${paper.id}`, 'PATCH', {
            key_findings_ru: finalFindingsRu,
            key_findings: finalFindingsEn
          });
          
          console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
          cleanedCount++;
          totalRemoved += totalRemovedForPaper;
        } catch (error) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, error.message);
        }
        console.log('   ---');
      } else {
        console.log(`‚úÖ "${title.substring(0, 50)}..." - –≤—ã–≤–æ–¥—ã OK`);
      }
    }

    console.log('\nüìà –ò–¢–û–ì–ò –û–ß–ò–°–¢–ö–ò:');
    console.log(`üîß –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${cleanedCount}`);
    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –ø–ª–æ—Ö–∏—Ö –≤—ã–≤–æ–¥–æ–≤: ${totalRemoved}`);
    console.log(`üìä –°—Ç–∞—Ç–µ–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${papers.length - cleanedCount}`);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê...');
    const finalResponse = await makeRequest('/rest/v1/research_papers?select=key_findings_ru,key_findings');
    const finalPapers = finalResponse || [];

    const stats = finalPapers.reduce((acc, paper) => {
      const findingsRu = paper.key_findings_ru || [];
      const findingsEn = paper.key_findings || [];
      acc.total++;
      acc.ruTotal += findingsRu.length;
      acc.enTotal += findingsEn.length;
      if (findingsRu.length === 0 && findingsEn.length === 0) acc.empty++;
      else if (findingsRu.length >= 1) acc.hasFindings++;
      return acc;
    }, { total: 0, ruTotal: 0, enTotal: 0, empty: 0, hasFindings: 0 });

    console.log(`üìä –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${stats.total}`);
    console.log(`üî§ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–æ–≤ (RU): ${stats.ruTotal} (—Å—Ä–µ–¥–Ω–µ–µ: ${stats.total > 0 ? (stats.ruTotal / stats.total).toFixed(1) : 0})`);
    console.log(`üî§ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–æ–≤ (EN): ${stats.enTotal} (—Å—Ä–µ–¥–Ω–µ–µ: ${stats.total > 0 ? (stats.enTotal / stats.total).toFixed(1) : 0})`);
    console.log(`‚ùå –°—Ç–∞—Ç–µ–π –±–µ–∑ –≤—ã–≤–æ–¥–æ–≤: ${stats.empty} (${stats.total > 0 ? (stats.empty / stats.total * 100).toFixed(1) : 0}%)`);
    console.log(`‚úÖ –°—Ç–∞—Ç–µ–π —Å –≤—ã–≤–æ–¥–∞–º–∏: ${stats.hasFindings} (${stats.total > 0 ? (stats.hasFindings / stats.total * 100).toFixed(1) : 0}%)`);

    console.log('\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

fixAllFindings().catch(console.error);