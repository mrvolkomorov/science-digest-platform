#!/usr/bin/env node

// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
const https = require('https');
const { URL } = require('url');

const SUPABASE_URL = 'https://azlrxwfbgyednniyxuhe.supabase.co';
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF6bHJ4d2ZiZ3llZG5uaXl4dWhlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MTg5MDg3OCwiZXhwIjoyMDc3NDY2ODc4fQ.T0tj0GY68cbLAt_iGRbRxQs_vr4lTKsACag9avKdIQs';

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã —à–∞–±–ª–æ–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
const TEMPLATE_PATTERNS = [
  '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –≤—ã–≤–æ–¥',
  '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥',
  'Scientific finding',
  '–≠—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç',
  '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç'
];

function makeRequest(url, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const options = {
      hostname: urlObj.hostname,
      port: 443,
      path: urlObj.pathname + urlObj.search,
      method: method,
      headers: {
        'Authorization': `Bearer ${SUPABASE_KEY}`,
        'apikey': SUPABASE_KEY,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      }
    };

    if (data) {
      options.headers['Content-Length'] = Buffer.byteLength(JSON.stringify(data));
    }

    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          if (res.statusCode >= 200 && res.statusCode < 300) {
            resolve(parsed);
          } else {
            reject(new Error(`HTTP ${res.statusCode}: ${JSON.stringify(parsed)}`));
          }
        } catch (e) {
          reject(new Error(`Parse error: ${responseData}`));
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

async function cleanTemplateFindings() {
  try {
    console.log('üßπ –ù–ê–ß–ò–ù–ê–ï–ú –û–ß–ò–°–¢–ö–£ –®–ê–ë–õ–û–ù–ù–´–• –í–´–í–û–î–û–í\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏
    const papersResponse = await makeRequest(`${SUPABASE_URL}/rest/v1/research_papers?select=id,title,title_ru,abstract,abstract_ru,key_findings,key_findings_ru&order=id.desc`);
    const papers = papersResponse.data || [];

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${papers.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n`);

    let cleanedCount = 0;
    let removedFindingsCount = 0;

    for (const paper of papers) {
      const title = paper.title_ru || paper.title;
      const currentFindingsRu = paper.key_findings_ru || [];
      const currentFindings = paper.key_findings || [];

      // –ò—â–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã –≤ —Ä—É—Å—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏
      const cleanedFindingsRu = currentFindingsRu.filter(finding => {
        const isTemplate = TEMPLATE_PATTERNS.some(pattern => 
          finding.toLowerCase().includes(pattern.toLowerCase())
        );
        return !isTemplate;
      });

      // –ò—â–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏
      const cleanedFindings = currentFindings.filter(finding => {
        const isTemplate = TEMPLATE_PATTERNS.some(pattern => 
          finding.toLowerCase().includes(pattern.toLowerCase())
        );
        return !isTemplate;
      });

      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏ –æ—á–∏—Å—Ç–∏–ª–∏ —à–∞–±–ª–æ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã
      if (cleanedFindingsRu.length !== currentFindingsRu.length || 
          cleanedFindings.length !== currentFindings.length) {
        
        const removedRu = currentFindingsRu.length - cleanedFindingsRu.length;
        const removedEn = currentFindings.length - cleanedFindings.length;
        const totalRemoved = removedRu + removedEn;
        
        console.log(`üîß –û—á–∏—â–∞–µ–º: "${title.substring(0, 50)}..."`);
        console.log(`   –£–¥–∞–ª–µ–Ω–æ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤: ${totalRemoved}`);
        console.log(`   –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–≤–æ–¥–æ–≤ (RU): ${cleanedFindingsRu.length} ‚Üí (EN): ${cleanedFindings.length}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
        try {
          const updateResponse = await makeRequest(
            `${SUPABASE_URL}/rest/v1/research_papers?id=eq.${paper.id}`,
            'PATCH',
            {
              key_findings_ru: cleanedFindingsRu,
              key_findings: cleanedFindings
            }
          );
          
          console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
          cleanedCount++;
          removedFindingsCount += totalRemoved;
        } catch (error) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, error.message);
        }
        console.log('   ---');
      }
    }

    console.log('\nüìà –ò–¢–û–ì–ò –û–ß–ò–°–¢–ö–ò:');
    console.log(`üîß –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${cleanedCount}`);
    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤: ${removedFindingsCount}`);
    console.log(`üìä –°—Ç–∞—Ç–µ–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${papers.length - cleanedCount}`);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê...');
    const finalResponse = await makeRequest(`${SUPABASE_URL}/rest/v1/research_papers?select=key_findings_ru,key_findings`);
    const finalPapers = finalResponse.data || [];

    const stats = finalPapers.reduce((acc, paper) => {
      const findingsRu = paper.key_findings_ru || [];
      const findingsEn = paper.key_findings || [];
      acc.total++;
      acc.ruTotal += findingsRu.length;
      acc.enTotal += findingsEn.length;
      if (findingsRu.length === 0 && findingsEn.length === 0) acc.empty++;
      else if (findingsRu.length >= 1) acc.hasFindings++;
      return acc;
    }, { total: 0, ruTotal: 0, enTotal: 0, empty: 0, hasFindings: 0 });

    console.log(`üìä –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${stats.total}`);
    console.log(`üî§ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–æ–≤ (RU): ${stats.ruTotal} (—Å—Ä–µ–¥–Ω–µ–µ: ${(stats.ruTotal / stats.total).toFixed(1)})`);
    console.log(`üî§ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≤–æ–¥–æ–≤ (EN): ${stats.enTotal} (—Å—Ä–µ–¥–Ω–µ–µ: ${(stats.enTotal / stats.total).toFixed(1)})`);
    console.log(`‚ùå –°—Ç–∞—Ç–µ–π –±–µ–∑ –≤—ã–≤–æ–¥–æ–≤: ${stats.empty} (${(stats.empty / stats.total * 100).toFixed(1)}%)`);
    console.log(`‚úÖ –°—Ç–∞—Ç–µ–π —Å –≤—ã–≤–æ–¥–∞–º–∏: ${stats.hasFindings} (${(stats.hasFindings / stats.total * 100).toFixed(1)}%)`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
cleanTemplateFindings().catch(console.error);